buildscript {

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "http://objectbox.net/beta-repo/" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.27.1'
        classpath 'io.objectbox:objectbox-gradle-plugin:0.9.12'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'io.objectbox'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "http://dl.bintray.com/countly/maven" }
    maven { url "https://jitpack.io" }
    maven { url "http://objectbox.net/beta-repo/" }
}


android {
    compileSdkVersion 26
    buildToolsVersion "26.0.3"

    defaultConfig {
        applicationId "io.gresse.hugo.anecdote"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 26
        versionName "1.2.2"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions.annotationProcessorOptions {
            arguments = ['toothpick_registry_package_name': 'io.gresse.hugo.anecdote']
        }
    }

    project.ext.set("archivesBaseName", "Anecdote");

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name == "release") {
                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name.replace(".apk", "-" + variant.versionName + ".apk"))
            }
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }

    signingConfigs {
        release {
            File signingPropFile = rootProject.file('signing.properties')
            if (signingPropFile.exists()) {
                Properties signingProp = new Properties()
                signingProp.load(signingPropFile.newDataInputStream())
                storeFile file(signingProp.get("release.storeFile"))
                storePassword signingProp.get("release.storePassword")
                keyAlias signingProp.get("release.keyAlias")
                keyPassword signingProp.get("release.keyPassword")
            } else if (System.getenv('RELEASE_KEYSTORE_BASE64') != null) {
                storeFile decodeKeyStoreFileFromBase64Env('RELEASE_KEYSTORE_BASE64')
                storePassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
                keyAlias System.getenv('RELEASE_KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('RELEASE_KEYSTORE_KEY_PASSWORD')
            }
        }
    }

    productFlavors {
        google {
            resValue "string", "flavor_name", "google"
        }
        oss {
            resValue "string", "flavor_name", "oss"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (rootProject.file('signing.properties').exists()
                    || System.getenv('RELEASE_KEYSTORE_BASE64') != null) {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }

}


ext.androidSupportLibraries = '25.3.1'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${androidSupportLibraries}"
    compile "com.android.support:preference-v7:${androidSupportLibraries}"
    compile "com.android.support:preference-v14:${androidSupportLibraries}"
    compile "com.android.support:design:${androidSupportLibraries}"
    compile "com.android.support:recyclerview-v7:${androidSupportLibraries}"
    compile "com.android.support:customtabs:${androidSupportLibraries}"
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    annotationProcessor 'com.github.stephanenicolas.toothpick:toothpick-compiler:1.0.6'
    compile 'com.github.stephanenicolas.toothpick:toothpick-runtime:1.0.6'
    compile 'com.github.stephanenicolas.toothpick:smoothie:1.0.6'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.google.android.exoplayer:exoplayer-core:r2.4.2'
    compile 'com.google.android.exoplayer:exoplayer-ui:r2.4.2'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.jsoup:jsoup:1.8.3'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    compile 'com.jakewharton:butterknife:8.5.1'
    compile 'com.github.chrisbanes:PhotoView:2.0.0'
    compile 'io.objectbox:objectbox-android:1.5.0'

    // Specific dependencies for flavors
    googleCompile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }


    ossCompile 'ly.count.android:sdk:16.06.04'


    androidTestCompile "com.android.support:support-annotations:${androidSupportLibraries}"
    androidTestCompile "com.android.support:appcompat-v7:${androidSupportLibraries}"
    androidTestCompile "com.android.support:design:${androidSupportLibraries}"
    androidTestCompile "com.android.support:recyclerview-v7:${androidSupportLibraries}"
    // Android JUnit Runner
    // JUnit4 Rules
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude group: 'com.google.code.findbugs'
    }
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    androidTestCompile 'tools.fastlane:screengrab:0.3.2'
}


def decodeKeyStoreFileFromBase64Env(String name) {
    String keyStoreBase64 = System.getenv(name)
    if (keyStoreBase64 == null) return null
    File tempKeyStoreFile = File.createTempFile("tmp_ks_", ".jks", File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempKeyStoreFile)
        fos.write(keyStoreBase64.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempKeyStoreFile
}